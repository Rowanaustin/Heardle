@using MudBlazor
@using RadioHeardleServer.Data;

<MudStack Spacing="0">
	<MudStack Row="true" Justify="Justify.Center">
			<div class="d-flex flex-grow-1">
				<AlbumButton AlbumIndex="0" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="1" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="2" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="3" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="4" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="5" Clicked="OnClickAlbum" Width="5"></AlbumButton>
				<AlbumButton AlbumIndex="6" Clicked="OnClickAlbum" Width="5"></AlbumButton>
			</div>
	</MudStack>

	@switch(_currentAlbumIndex)
	{
		case 0:
		{
			<MudPaper Style="@($"color:{Colors.Yellow.Darken2}; background:{Colors.Grey.Lighten1};")">
					<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[0]" Title="Pablo Honey" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Yellow.Darken2}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		case 1:
		{
				<MudPaper Style="@($"color:{Colors.Shades.White}; background:{Colors.Grey.Darken4};")">
				<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[1]" Title="The Bends" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Brown.Lighten2}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		case 2:
		{
				<MudPaper Style="@($"color:{Colors.Blue.Darken2}; background:{Colors.Shades.White};")">
				<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[2]" Title="Ok Computer" Style="@($"color:{Colors.Blue.Darken2}; background:{Colors.BlueGrey.Lighten3}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		case 3:
		{
				<MudPaper Style="@($"color:{Colors.Shades.White}; background:{Colors.BlueGrey.Darken4};")">
					<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[3]" Title="Kid A" Style="@($"color:{Colors.Blue.Default}; background:{Colors.Shades.White}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		case 4:
		{
				<MudPaper Style="@($"color:{Colors.Shades.Black}; background:{Colors.Red.Darken1};")">
				<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[4]" Title="Amnesiac" Style="@($"color:{Colors.Shades.White}; background:{Colors.Shades.Black}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		case 5:
		{
			<MudPaper Style="@($"color:{Colors.Shades.Black}; background:{Colors.Blue.Lighten2};")">
					<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[5]" Title="Hail to the Thief" Style="@($"color:{Colors.Green.Darken4}; background:{Colors.Red.Lighten2}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
		default:
		{
			<MudPaper Style="@($"color:{Colors.Yellow.Lighten2}; background:{Colors.Shades.Black};")">
					<AlbumView GuessedSongs="GuessedSongs" Songs="@_songsByAlbum[6]" Title="In Rainbows" Style="@($"color:{Colors.Blue.Darken3}; background:{Colors.Orange.Lighten2}; ")" OnClickSong="OnClickSong"></AlbumView>
			</MudPaper>
			break;
		}
	}

</MudStack>



@code {

	[Parameter]
	public SongData[] Songs { get; set; }

	[Parameter]
	public List<string> GuessedSongs { get; set; }

	[Parameter]
	public EventCallback<string> OnClickSong { get; set; }

	private List<List<SongData>> _songsByAlbum;
	private int _currentAlbumIndex;

	protected override void OnParametersSet()
	{
		ResetLists();

		foreach(var song in Songs)
		{
			_songsByAlbum[song._albumIndex].Add(song);
		}

		for (int i = 0; i < 7; i++)
			_songsByAlbum[i] = _songsByAlbum[i].OrderBy(s => s._trackIndex).ToList();
	}

	private void ResetLists()
	{
		_songsByAlbum = new();

		for (int i = 0; i < 7; i++)
			_songsByAlbum.Add(new List<SongData>());
	}

	private void OnClickAlbum(int album)
	{
		_currentAlbumIndex = album;
		StateHasChanged();
	}
}