@page "/"
@using MudBlazor
@using RadioHeardleServer.Data;
@inject IJSRuntime JsRuntime;
@inject FileOperationsService fileOperationsService;

<PageTitle>Radioheardle</PageTitle>


<MudStack>
	<MudCard>
		<MudCardContent>
			<MudChip hidden="@hideChip" Color="@chipColor" Text="@chipText"></MudChip>
			<MudProgressLinear Color="Color.Secondary" Value="@BufferValue" Class="my-7" />
			<MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" />
			<MudSwitch @bind-Checked="@PlaySwitch" Label="Play" Color="Color.Success" />
		</MudCardContent>
	</MudCard>

	<MudCard>
		<MudCardContent>
			<MudButton @onclick="@HandleOnSkip">Skip</MudButton>
			<MudStack Row=true>
				<MudIcon Icon="@_skipIcons[0]"></MudIcon>
				<MudIcon Icon="@_skipIcons[1]"></MudIcon>
				<MudIcon Icon="@_skipIcons[2]"></MudIcon>
				<MudIcon Icon="@_skipIcons[3]"></MudIcon>
				<MudIcon Icon="@_skipIcons[4]"></MudIcon>
			</MudStack>
			<MudStack Row=true>
				<MudTextField @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined" ReadOnly="@GameCompleted"></MudTextField>
				<MudButton @onclick="@HandleOnGuess" Disabled="@GameCompleted">Guess</MudButton>
			</MudStack>
		</MudCardContent>
	</MudCard>
</MudStack>

<audio id="audioPlayer" src='@_audioAddress' />


@code {
	public bool GameCompleted { get; set; } = false;
	public int Value { get; set; } = 0;
	public int BufferValue { get; set; } = 20;

	public string TextValue { get; set; }

	private bool hideChip = true;
	private Color chipColor;
	private string chipText;

	private bool _playSwitch = false;
	public bool PlaySwitch
	{
		get { return _playSwitch; }
		set { _playSwitch = value; HandleOnPlayChanged(); }
	}

	private string[] _skipIcons = new string[5];

	private int _skipLoc = 0;

	private string _audioAddress;
	private string _songName;

	private bool _disposed;

	public void Dispose() => _disposed = true;

	private IJSObjectReference _jsModule;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/SoundScripts.js");
		}
	}

	protected override void OnInitialized()
	{
		var songData = fileOperationsService.GetData();

		_audioAddress = "./Audio/" + songData._fileName;
		_songName = songData._songName;
		//_audioAddress = "Audio/InterspaceGarden.mp3";

		for (var i = 0; i < _skipIcons.Length; i++)
			_skipIcons[i] = Icons.Material.Filled.Lock;

		_skipIcons[0] = Icons.Material.Filled.LockOpen;
	}

	private async void HandleOnPlayChanged()
	{
		if (_playSwitch)
		{
			CallJsFunc("PlaySound");

			//set timer
			var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(100));
			while (await timer.WaitForNextTickAsync() && Value <= BufferValue)
			{
				Value += 1;
				StateHasChanged();
			}

			PlaySwitch = false;
		}
		else
		{
			CallJsFunc("StopSound");
			Value = 0;
			StateHasChanged();
		}
	}

	private void HandleOnSkip()
	{
		BufferValue += 20;

		if (_skipLoc == 4)
			CompleteGame(false);
		else
		{
			_skipLoc += 1;
			_skipIcons[_skipLoc] = Icons.Material.Filled.LockOpen;
		}
	}

	private void HandleOnGuess()
	{
		if (TextValue.Equals(_songName))
			CompleteGame(true);
		else
			TextValue = "";
	}

	private void CompleteGame(bool win)
	{
		TextValue = _songName;
		GameCompleted = true;

		chipColor = win ? Color.Success : Color.Error;
		chipText = win ? "Success" : "Failure";
		hideChip = false;
	}

	private void CallJsFunc(string funcName)
	{
		Console.WriteLine("calling " + funcName);
		_jsModule.InvokeVoidAsync(funcName);
	}
}