@page "/"
@using MudBlazor
@using RadioHeardleServer.Data;
@using System.Globalization;
@inject IJSRuntime JsRuntime;
@inject FileOperationsService fileOperationsService;

<PageTitle>Radioheardle</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
<MudStack>
	<MudCard>
		<MudCardContent>
			<MudText><h1>Radioheardle</h1></MudText>
			<MudText>@_editionDate</MudText>
			<MudStack Row=true>
				<MudChip hidden="@gameIncomplete" Color="@chipColor" Text="@chipText"></MudChip>
				<MudText hidden="@gameIncomplete" Align="Align.Center">@_songName</MudText>
			</MudStack>
			<MudProgressLinear Color="Color.Secondary" Value="@BufferValue" Class="my-7" Size="Size.Medium"/>
			<MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" Size="Size.Large" />
			<MudSwitch @bind-Checked="@PlaySwitch" Label="Play" Color="Color.Success" />
		</MudCardContent>
	</MudCard>

	<MudCard>
		<MudCardContent>
			<MudStack Row=true Justify="Justify.SpaceEvenly">
				<MudButton @onclick="@HandleOnSkip" Disabled="@GameCompleted">Skip</MudButton>
				<MudIcon Icon="@_skipIcons[0]"></MudIcon>
				<MudIcon Icon="@_skipIcons[1]"></MudIcon>
				<MudIcon Icon="@_skipIcons[2]"></MudIcon>
				<MudIcon Icon="@_skipIcons[3]"></MudIcon>
				<MudIcon Icon="@_skipIcons[4]"></MudIcon>
			</MudStack>
			<MudStack Row=true Spacing="4">
				<!--<MudTextField @bind-Value="GuessText" Variant="Variant.Filled" ReadOnly="@GameCompleted">Guess...</MudTextField>-->
					<MudAutocomplete T="string" @bind-Value="@GuessText" Disabled="@GameCompleted" SearchFunc="@AutoComplete" MaxItems=5>
					<MoreItemsTemplate>
						<MudText Align="Align.Center" Class="px-4 py-1">
							...
						</MudText>
					</MoreItemsTemplate>
					<NoItemsTemplate>
						<MudText Align="Align.Center" Class="px-4 py-1">
							No songs match
						</MudText>
					</NoItemsTemplate>
				</MudAutocomplete>
				<MudButton @onclick="@HandleOnGuess" Disabled="@GameCompleted">Guess</MudButton>
			</MudStack>
		</MudCardContent>
	</MudCard>
	<MudCard>
		<MudCardContent>
			<MudTextField @bind-Value="ResultText" Lines="3" Variant="Variant.Outlined" hidden="@gameIncomplete" ReadOnly="true"></MudTextField>
		</MudCardContent>
	</MudCard>
</MudStack>
<MudCard>
	<MudCardContent>
		<MudText Typo="Typo.body2">Guessing or Skipping will unlock the next section of the preview.</MudText>
				<MudText Typo="Typo.body2">(First 7 Albums)</MudText>
	</MudCardContent>
</MudCard>
</MudContainer>

<audio id="audioPlayer" src='@_audioAddress' type="audio/mpeg" />


@code {

	private static int _numGuesses = 5;

	public bool GameCompleted { get; set; } = false;
	public int Value { get; set; } = 0;
	public int BufferValue { get; set; } = 100 / _numGuesses;

	public string GuessText { get; set; }
	public string ResultText { get; set; }

	private bool gameIncomplete = true;
	private Color chipColor;
	private string chipText;

	private bool _playSwitch = false;
	public bool PlaySwitch
	{
		get { return _playSwitch; }
		set { _playSwitch = value; HandleOnPlayChanged(); }
	}

	private string[] _skipIcons = new string[_numGuesses];

	private int _skipLoc = 0;
	private List<bool> _guessOrSkip;

	private string _audioAddress;
	private string _songName;
	private string _editionDate;

	private bool _disposed;

	public void Dispose() => _disposed = true;

	private IJSObjectReference _jsModule;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/SoundScripts.js");
		}
	}

	protected override void OnInitialized()
	{
		var songData = fileOperationsService.GetData();

		_audioAddress = "./Audio/" + songData._songData._fileName;
		_songName = songData._songData._songName;
		_editionDate = songData._updateDate.DayOfWeek + " " + songData._updateDate.Date.ToString("d", new CultureInfo("en-uk"));

		_guessOrSkip = new();

		Console.WriteLine(_songName);

		for (var i = 0; i < _skipIcons.Length; i++)
			_skipIcons[i] = Icons.Material.Filled.Lock;

		_skipIcons[0] = Icons.Material.Filled.LockOpen;
	}

	private async Task<IEnumerable<string>> AutoComplete(string search)
	{
		return fileOperationsService.GetSearchSongs(search);
	}

	private async void HandleOnPlayChanged()
	{
		if (_playSwitch)
		{
			CallJsFunc("PlaySound");

			//set timer
			var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(160));
			while (await timer.WaitForNextTickAsync() && Value <= BufferValue)
			{
				Value += 1;
				StateHasChanged();
			}

			PlaySwitch = false;
		}
		else
		{
			CallJsFunc("StopSound");
			Value = 0;
			StateHasChanged();
		}
	}

	private void HandleOnSkip()
	{
		GuessText = string.Empty;
		_guessOrSkip.Add(false);
		MoveToNextSection();
	}

	private void HandleOnGuess()
	{
		var song = _songName.Trim();

		if (GuessText == null || GuessText.Length == 0)
			return;

		if (string.Compare(GuessText.Trim(), song, StringComparison.InvariantCultureIgnoreCase) == 0)
		{
			CompleteGame(true);
		}
		else
		{
			_guessOrSkip.Add(true);
			MoveToNextSection();
			StateHasChanged();
		}
	}

	private void MoveToNextSection()
	{
		if (_skipLoc >= (_numGuesses - 1))
		{
			if (!GameCompleted)
			{
				_skipLoc = _numGuesses;
				CompleteGame(false);
			}
		}
		else
		{
			BufferValue += (100 / _numGuesses);
			_skipLoc += 1;
			_skipIcons[_skipLoc] = Icons.Material.Filled.LockOpen;
		}
	}

	private void CompleteGame(bool win)
	{
		GuessText = _songName;
		GameCompleted = true;

		ResultText = ResultGenerator.GetResultText(_numGuesses, _guessOrSkip, _editionDate);

		chipColor = win ? Color.Success : Color.Error;
		chipText = win ? "Success" : "Failure";
		gameIncomplete = false;
	}

	private void CallJsFunc(string funcName)
	{
		_jsModule.InvokeVoidAsync(funcName);
	}
}