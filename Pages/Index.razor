@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using MudBlazor
@using MudBlazor.Services
@using RadioHeardleServer.Data;
@using System.Globalization;
@using Fastenshtein;

@inject IJSRuntime JsRuntime
@inject FileOperationsService FileOperationsService
@inject MudThemeProvider MudThemeProvider
@inject ProtectedLocalStorage ProtectedLocalStore
@inject CookiesService CookiesService


<PageTitle>Radioheardle</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small">
	@if (loading)
	{
		<MudContainer MaxWidth="MaxWidth.Small">

				<MudStack Row=true Justify="Justify.SpaceBetween">
					<MudSkeleton Width="10%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
					<MudSkeleton Width="10%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
				</MudStack>

			<MudStack>
				<MudCard >
					<MudCardContent>
						<MudStack Justify="Justify.SpaceEvenly">
							<MudStack AlignItems="AlignItems.End">
								<MudSkeleton Width="42%" Height="43px" SkeletonType="SkeletonType.Rectangle" />
								<MudSkeleton Width="32%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
							</MudStack>

						<MudSkeleton />
						<MudSkeleton />
							<MudSkeleton Width="35px" Height="35px" SkeletonType="SkeletonType.Circle"></MudSkeleton>
						</MudStack>
					</MudCardContent>
				</MudCard>

				<MudSkeleton />
				<MudSkeleton Height="150px" SkeletonType="SkeletonType.Rectangle" />

			</MudStack>
		</MudContainer>
	}
	else
	{
		<MudContainer>
			<MudStack Row=true Justify="Justify.SpaceBetween">
					<MudButton Color="Color.Surface" OnClick="OnOpenHelp" Disabled="@WaitingToShowStats">About</MudButton>
					<MudButton Color="Color.Surface" OnClick="OnOpenStats" Disabled="@WaitingToShowStats">Stats</MudButton>
			</MudStack>
		<MudStack>
			<MudCard >
				<MudCardContent>

					@if (!_guessInputFocused || _breakpoint.CompareTo(Breakpoint.Sm) >= 1)
					{
						<MudText Align="Align.Right"><h1>Radioheardle</h1></MudText>
						<MudText Align="Align.Right">@_editionDate</MudText>
					}

					<MudProgressLinear Color="@BarColour" Value="@BufferValue" Class="my-7" Size="Size.Medium" />

					@if (!_guessInputFocused || _breakpoint.CompareTo(Breakpoint.Sm) >= 1)
					{
						<MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" Size="Size.Large" />
						<MudSwitch @bind-Checked="@PlaySwitch" Label="Play" Color="Color.Success" />
					}
					</MudCardContent>
			</MudCard>

			<MudText hidden="@gameIncomplete" Align="Align.Center" Typo="Typo.h4">@_songName</MudText>
			<MudStack Justify="Justify.Center">
				<MudChip hidden="@gameIncomplete" Color="@chipColor" Text="@chipText"></MudChip>
			</MudStack>
		
			<MudCard hidden="@GameCompleted">
				<MudCardContent>
					<MudStack Row=true Spacing="4">
						<MudButton @onclick="@HandleOnSkip" Disabled="@GameCompleted">@Skip</MudButton>
						<MudButton @onclick="@HandleOnGuess" Disabled="@GameCompleted">Guess</MudButton>
					</MudStack>
					<MudAutocomplete T="string" @bind-Value="@GuessText" Disabled="@GameCompleted" SearchFunc="@AutoComplete" MaxItems=5 @onfocus="HandleOnGuessFocus" OnBlur="HandleOnGuessBlur">
							<MoreItemsTemplate>
								<MudText Align="Align.Center" Class="px-4 py-1">
									...
								</MudText>
							</MoreItemsTemplate>
						</MudAutocomplete>
				</MudCardContent>
			</MudCard>

		</MudStack>

		<!-- STATS -->
			<MudOverlay Style="opacity:0.99" @bind-Visible="_statsVisible" DarkBackground="true">
		<MudStack>
			<MudCard>
				<MudCardContent>
					<MudStack Justify="Justify.SpaceBetween" Row=true>
						<MudStack>
						<MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Surface" OnClick="OnCloseOverlay">Close</MudButton>
						<MudItem></MudItem>
								</MudStack>
						<MudText Class="pa-4" Align="Align.Right" Color="Color.Info"><h2>Stats</h2></MudText>
					</MudStack>
					<MudGrid Justify="Justify.SpaceEvenly">
						<MudTr>
							<StatsBadge Description="Played" Stat="@_gamesPlayed"></StatsBadge>
						</MudTr>
						<MudTr>
							<StatsBadge Description="Win Percent" Stat="@_winPercentage" IsPercent=true></StatsBadge>
						</MudTr>
						<MudTr>
							<StatsBadge Description="Current Streak" Stat="@_streak"></StatsBadge>
						</MudTr>
					</MudGrid>
			
					<MudChart  ChartType="ChartType.Bar" ChartOptions="@chartOptions" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
					<MudSpacer ></MudSpacer>
					<MudText Class="pa-2" Align="Align.Center">Guess Distribution</MudText>
					</MudCardContent>
			</MudCard>
			<MudCard hidden="@gameIncomplete">
				<MudCardContent>
						<MudTextField @bind-Value="ResultText" onclick="@AutoHighlight()" Lines="4" Variant="Variant.Outlined" Label="Copy this text to show your mates" ReadOnly="true"></MudTextField>
				</MudCardContent>
			</MudCard>


		</MudStack>

		</MudOverlay>

		<!-- ABOUT -->

		<MudOverlay Style="opacity:0.99" @bind-Visible="@_helpVisible" DarkBackground="true">
			<MudStack>
				<MudCard>
					<MudCardContent>
						<MudStack Justify="Justify.SpaceBetween" Row=true>
							<MudStack>
									<MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Surface" OnClick="OnCloseOverlay">Close</MudButton>
								<MudItem></MudItem>
							</MudStack>
							<MudText Class="pa-4" Color="Color.Info" Align="Align.Right"><h2>About</h2></MudText>
						</MudStack>
							<MudText Typo="Typo.body2">Guess the Radiohead song - you get 5 attempts.</MudText>
							<MudText Typo="Typo.body2">Guessing incorrectly or skipping will unlock the next section of the preview.</MudText>
							<MudText Typo="Typo.body2">The song is randomly chosen each day from the first 7 studio albums.</MudText>
					</MudCardContent>
				</MudCard>
					<MudCardContent>
						<MudCard>
							<MudCardContent>
								<MudSwitch @bind-Checked="IsDarkMode" Label="Dark Mode" Color="Color.Surface" />
							</MudCardContent>
						</MudCard>
					</MudCardContent>
						<MudCard>

				</MudCard>
			</MudStack>
		</MudOverlay>

	</MudContainer>
	}

</MudContainer>

<MudThemeProvider IsDarkMode="@_isDarkMode"></MudThemeProvider>


<audio id="audioPlayer" src='@_audioAddress' type="audio/mpeg" />


@code {

	private static int _numGuesses = 5;
	private static int _totalSectionDuration = 20;
	private static int[] _sectionDurations = new int[] { 1, 2, 3, 5, 9, 0 };
	private static float _bufferPart = 100 / _totalSectionDuration;
	private static int _bufferTick = _totalSectionDuration * 10;

	public bool GameCompleted { get; set; } = false;
	public bool WaitingToShowStats { get; set; } = false;
	public int Value { get; set; } = 0;
	public float BufferValue { get; set; } = _bufferPart * _sectionDurations[0];

	public List<ChartSeries> Series { get; set; }
	public string[] XAxisLabels { get; set; }

	public string GuessText { get; set; }
	public string ResultText { get; set; }
	public Color BarColour { get; set; } = Color.Success;

	public string Skip { get; set; } = "Skip";

	private bool gameIncomplete = true;
	private bool _helpVisible = false;
	private bool _statsVisible = false;
	private Color chipColor;
	private string chipText;

	private bool _playSwitch = false;
	public bool PlaySwitch
	{
		get { return _playSwitch; }
		set { _playSwitch = value; HandleOnPlayChanged(); }
	}

	private string[] _skipIcons = new string[_numGuesses];

	private string _guesses = "";

	private bool _guessInputFocused = false;

	private string _audioAddress;
	private string _songName;
	private string _editionDate;
	private int _editionVersion;
	private int[] _currentResults;
	private int _lastVersionWon;
	private int _streak;

	private int _winPercentage;
	private int _gamesPlayed;

	private bool loading = true;
	private bool loaded = false;

	private bool _disposed;

	[Inject] IBreakpointService BreakpointListener { get; set; }

	private Breakpoint _breakpoint;

	public void Dispose() => _disposed = true;

	private IJSObjectReference _jsModule;

	private bool _isDarkMode = true;
	public bool IsDarkMode
	{
		get { return _isDarkMode; }
		set { _isDarkMode = value; HandleOnDarkModeChanged(); }
	}

	private ChartOptions chartOptions = new ChartOptions()
	{
		LineStrokeWidth = 20.0,
		YAxisTicks = 1,
		DisableLegend = true,
		ChartPalette = new string[] { Colors.Green.Default, Colors.LightBlue.Default }
	};

	private string AutoHighlight()
	{
		return "window.focusedElement = this;  setTimeout(function () { window.focusedElement.setSelectionRange(0, window.focusedElement.value.length) }, 100);";
	}

	protected override async Task OnInitializedAsync()
	{
		RefreshStats();
		var songData = FileOperationsService.GetData();
		_audioAddress = "./Audio/" + songData._songData._fileName;
		_songName = songData._songData._songName;
		_editionDate = songData._updateDate.DayOfWeek + " " + songData._updateDate.Date.ToString("d", new CultureInfo("en-GB"));
		_editionVersion = songData._version;
		_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/SoundScripts.js");
		CookiesService.Setup(ProtectedLocalStore);
		await CookiesService.LoadStorage();
		HandleStorageState();
		RefreshStats();
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await BreakpointListener.Subscribe(breakpoint => _breakpoint = breakpoint);
			_breakpoint = BreakpointListener.GetBreakpoint().Result;
		}
	}

	private void HandleStorageState()
	{
		_isDarkMode = CookiesService.DarkSetting;

		_currentResults = CookiesService.Results;

		if (CookiesService.LastVersionWon +1  < _editionVersion )
		{
			_streak = 0;
		}
		else
		{
			_streak = CookiesService.Streak;
		}

		_lastVersionWon = CookiesService.LastVersionWon;

		if (CookiesService.Version == _editionVersion)
		{
			_guesses = CookiesService.Guesses;

			for (int i = 0; i <= _guesses.Length; i++)
			{
				BufferValue += _bufferPart * _sectionDurations[i];
			}

			if (CookiesService.GameComplete)
			{
				CompleteGame();
			}
			else
				HandleSkipPosition();
		}

		loading = false;
		loaded = true;
		StateHasChanged();
	}

	private async Task<IEnumerable<string>> AutoComplete(string search)
	{
		return FileOperationsService.GetSearchSongs(search).OrderBy(each => Fastenshtein.Levenshtein.Distance(each, search));
	}

	private void HandleOnDarkModeChanged()
	{
		StateHasChanged();
		CookiesService.DarkSetting = _isDarkMode;
		CookiesService.CommitStorage();
	}

	private async void HandleOnPlayChanged()
	{
		if (_playSwitch)
		{
			CallJsFunc("PlaySound");

			//set timer
			var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(_bufferTick));
			while (await timer.WaitForNextTickAsync() && Value <= BufferValue && PlaySwitch)
			{
				Value += 1;
				StateHasChanged();
			}

			PlaySwitch = false;
		}
		else
		{
			CallJsFunc("StopSound");
			Value = 0;
			StateHasChanged();
		}
	}

	private void HandleOnGuessFocus()
	{
		_guessInputFocused = true;
	}

	private void HandleOnGuessBlur()
	{
		_guessInputFocused = false;
	}

	private void OnOpenHelp()
	{
		_helpVisible = true;

		StateHasChanged();
	}

	private void OnOpenStats()
	{
		_statsVisible = true;

		StateHasChanged();
	}

	private void OnCloseOverlay()
	{
		_helpVisible = false;
		_statsVisible = false;

		StateHasChanged();
	}


	private void HandleOnSkip()
	{
		GuessText = string.Empty;
		_guesses += 's';
		BufferValue += _bufferPart * _sectionDurations[_guesses.Length];
		if (_guesses.Length >= (_numGuesses))
			CookiesService.Results[0] += 1;
		HandleSkipPosition();
	}

	private async void HandleOnGuess()
	{
		var song = _songName.Trim();

		if (GuessText == null || GuessText.Length == 0)
			return;

		if (string.Compare(GuessText.Trim(), song, StringComparison.InvariantCultureIgnoreCase) == 0)
		{
			_guesses += 'w';
			CookiesService.Results[_guesses.Length] += 1;

			CompleteGame();
		}
		else
		{
			_guesses += 'g';
			BufferValue += _bufferPart * _sectionDurations[_guesses.Length];
			if (_guesses.Length >= (_numGuesses))
				CookiesService.Results[0] += 1;
			HandleSkipPosition();
		}

		UpdateCookies();
		await CookiesService.CommitStorage();
	}

	private async void HandleSkipPosition()
	{
		switch (_guesses.Length)
		{
			case 0:
				BarColour = Color.Success;
				break;
			case 1:
				BarColour = Color.Info;
				break;
			case 2:
				BarColour = Color.Warning;
				break;
			case 3:
				BarColour = Color.Secondary;
				break;
			case 4:
				BarColour = Color.Error;
				break;
			default:
				BarColour = Color.Primary;
				break;
		}

		if (_guesses.Length >= (_numGuesses))
		{
			if (!GameCompleted)
			{
				CompleteGame();
			}
		}
		else if (_guesses.Length == _numGuesses - 1)
		{
			Skip = "Give up";
		}

		UpdateCookies();
		await CookiesService.CommitStorage();

		StateHasChanged();
	}

	private async void CompleteGame()
	{
		var win = _guesses.EndsWith('w');

		GuessText = _songName;
		GameCompleted = true;

		if ( _editionVersion != _lastVersionWon)
		{
			if (win)
			{
				_streak += 1;
				_lastVersionWon = _editionVersion;
			}
			else
			{
				_streak = 0;
			}
		}

		RefreshStats();

		ResultText = ResultGenerator.GetResultText(_numGuesses, _guesses, _editionDate);

		chipColor = win ? Color.Success : Color.Error;
		chipText = win ? "Success" : "Failure";
		BarColour = Color.Primary;
		gameIncomplete = false;
		BufferValue = 100;

		await ProcessCompletion();
	}

	private void UpdateCookies()
	{
		CookiesService.UpdateStorage(_editionVersion, _guesses, GameCompleted, _currentResults, _lastVersionWon, _streak);
	}

	private async Task ProcessCompletion()
	{
		WaitingToShowStats = true;
		StateHasChanged();
		await Task.Delay(3000);
		_statsVisible = true;
		WaitingToShowStats = false;
		StateHasChanged();
	}

	private void RefreshStats()
	{
		var results = CookiesService.Results != null ? CookiesService.Results : new int[6];

		_gamesPlayed = 0;
		foreach (var games in results)
		{
			_gamesPlayed += games;
		}

		if (_gamesPlayed != 0)
		{
			var losePercentage = (float)results[0] / _gamesPlayed;
			_winPercentage = 100 - (int)(losePercentage * 100);
		}

		var withoutCurrent = new int[5];
		Array.Copy(results, 1, withoutCurrent, 0, 5);
		var mainArray = withoutCurrent.Select(x => (double)x).ToArray();

		var current = new double[5];

		if (GameCompleted)
		{
			if (_guesses.EndsWith('w'))
			{
				current[_guesses.Length - 1] = (double)results[_guesses.Length];
				mainArray[_guesses.Length - 1] = 0;
			}
		}

		Series = new List<ChartSeries>()
		{
			new ChartSeries() { Name = "Current", Data = current },
			new ChartSeries() { Name = "Guess Distribution", Data = mainArray }
		};

		XAxisLabels = new string[]{ "1", "2", "3", "4", "5" };
	}

	private void CallJsFunc(string funcName)
	{
		_jsModule.InvokeVoidAsync(funcName);
	}
}