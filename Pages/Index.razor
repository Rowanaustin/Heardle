@page "/"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@using MudBlazor
@using MudBlazor.Services
@using RadioHeardleServer.Data;
@using System.Globalization;
@using Fastenshtein;

@inject IJSRuntime JsRuntime
@inject FileOperationsService FileOperationsService
@inject MudThemeProvider MudThemeProvider
@inject ProtectedLocalStorage ProtectedLocalStore
@inject CookiesService CookiesService


<PageTitle>Radioheardle</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraSmall">
	@if (loading)
	{
		<MudContainer MaxWidth="MaxWidth.Small">

				<MudStack Row=true Justify="Justify.SpaceBetween">
					<MudSkeleton Width="10%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
					<MudSkeleton Width="10%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
				</MudStack>

			<MudStack>
				<MudCard >
					<MudCardContent>
						<MudStack Justify="Justify.SpaceEvenly">
							<MudStack AlignItems="AlignItems.End">
								<MudSkeleton Width="42%" Height="43px" SkeletonType="SkeletonType.Rectangle" />
								<MudSkeleton Width="32%" Height="25px" SkeletonType="SkeletonType.Rectangle" />
							</MudStack>

						<MudSkeleton />
						<MudSkeleton />
							<MudSkeleton Width="35px" Height="35px" SkeletonType="SkeletonType.Circle"></MudSkeleton>
						</MudStack>
					</MudCardContent>
				</MudCard>

				<MudSkeleton />
				<MudSkeleton Height="150px" SkeletonType="SkeletonType.Rectangle" />

			</MudStack>
		</MudContainer>
	}
	else
	{
		<MudContainer>
			<MudStack Row=true Justify="Justify.SpaceBetween">
					<MudButton Color="Color.Surface" OnClick="OnOpenHelp" Disabled="@WaitingToShowStats">About</MudButton>
					<MudButton Color="Color.Surface" OnClick="OnOpenStats" Disabled="@WaitingToShowStats">Stats</MudButton>
			</MudStack>
			<MudCard >
				<MudCardContent>

					<MudStack Row="true" Justify="Justify.SpaceBetween">
						<MudText Align="Align.Left"><h1>Radioheardle</h1></MudText>
						<MudText Align="Align.Right"><h1>@_editionVersion.ToString()</h1></MudText>
					</MudStack>

					<MudText Typo="Typo.body2" Align="Align.Right">@_editionDate</MudText>
					 
					<MudProgressLinear Color="@BarColour" Value="@BufferValue" Size="Size.Medium" />

					<MudProgressLinear Color="Color.Primary" Value="@Value" Size="Size.Large" />

					<MudStack Row="true" Justify="Justify.SpaceBetween">
						<MudSwitch @bind-Checked="@PlaySwitch" Label="Play" Color="Color.Success" />
						<MudButton @onclick="@HandleOnSkip" Disabled="@GameCompleted">@Skip</MudButton>
					</MudStack>
					
					</MudCardContent>
			</MudCard>

			<MudStack Justify="Justify.Center" Spacing="2">
				<MudSpacer/>

					<MudText hidden="@gameIncomplete" Align="Align.Center" Typo="Typo.h4">@_songName</MudText>

					<MudText hidden="@gameIncomplete" Align="Align.Center" Typo="Typo.caption">@DisplayConsts.AlbumNames[_albumIndex]</MudText>

					<MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
					<MudImage Src="@DisplayConsts.AlbumCovers[_albumIndex]"
						Class="rounded-0" Style="@($"width: 4pc; height: 4pc; color:" + DisplayConsts.AlbumColours[_albumIndex].Background )" ObjectPosition="ObjectPosition.Center"
						/>
					</MudStack>
			
				<MudChip hidden="@gameIncomplete" Color="@chipColor" Text="@chipText"></MudChip>
			</MudStack>
		
			<MudCard hidden="@GameCompleted">
				<MudCardContent>
					<MudStack Justify="Justify.Center">
					<AlbumSongScroller GuessedSongs="_guessedSongs" OnClickSong="HandleOnChipGuess" Songs="FileOperationsService.SongList"></AlbumSongScroller>
					</MudStack>
				</MudCardContent>
			</MudCard>


		<!-- STATS -->
		<MudOverlay Style="opacity:0.99" @bind-Visible="_statsVisible" DarkBackground="true">
		
			<StatsView GameComplete="GameCompleted" OnClose="OnCloseOverlay" ResultText="@ResultText" Series="Series" Statistics="Statistics" XAxisLabels="XAxisLabels" 
				BestScoreToday="BestUserData" OnGoToNameSet="OnOpenHelp"
				HasTopScoreWithoutName="@((CookiesService.DayScorePushedWithTag.Length < 1) && GameCompleted && (_guesses.Last() == 'w') && (_guesses.Length == BestUserData.Score))"/>

		</MudOverlay>

		<!-- ABOUT -->

		<MudOverlay Style="opacity:0.99" @bind-Visible="@_helpVisible" DarkBackground="true">
			<MudStack>
				<MudCard>
					<MudCardContent>
						<MudStack Justify="Justify.SpaceBetween" Row=true>
							<MudStack>
									<MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Surface" OnClick="OnCloseOverlay">Close</MudButton>
								<MudItem></MudItem>
							</MudStack>
								<MudText Class="pa-4" Color="Color.Primary" Align="Align.Right"><h2>About</h2></MudText>
						</MudStack>
							<MudText Typo="Typo.body2">Guess the Radiohead song - you get 5 attempts.</MudText>
							<MudText Typo="Typo.body2">Guessing incorrectly or skipping will unlock the next section of the preview.</MudText>
							<MudText Typo="Typo.body2">The answers are all from the 9 studio albums.</MudText>
					</MudCardContent>
				</MudCard>

				<MudCard>
					<MudCardContent>
						<MudStack Row="true">
							<MudTextField T="string" Label="@(CookiesService.DayScorePushedWithTag.Length < 1 ? "Your Name" : "Already submitted today")" @bind-Text="@_userTag" @bind-Disabled="_userTagNotInEdit"></MudTextField>
							<MudButton Disabled="@(CookiesService.DayScorePushedWithTag.Length > 0)" OnClick="HandleOnUserTagEditToggle" @bind-Color="_userTagEditToggleButtonColor">@_userTagEditToggleButtonText</MudButton>
						</MudStack>
					</MudCardContent>
				</MudCard>

				<MudCard>
					<MudCardContent>
						<MudSwitch @bind-Checked="IsDarkMode" Label="Dark Mode" Color="Color.Surface" />
					</MudCardContent>
				</MudCard>
					
			</MudStack>
		</MudOverlay>

	</MudContainer>
	}

</MudContainer>

<MudThemeProvider Theme="RadioheardleTheme" IsDarkMode="@_isDarkMode"></MudThemeProvider>


<audio id="audioPlayer" src='@_audioAddress' type="audio/mpeg" />


@code {

	private static int _numGuesses = 5;
	private static int _totalSectionDuration = 20;
	private static int[] _sectionDurations = new int[] { 1, 2, 3, 5, 9, 0 };
	private static float _bufferPart = 100 / _totalSectionDuration;
	private static int _bufferTick = _totalSectionDuration * 10;

	public bool GameCompleted { get; set; } = false;
	public bool WaitingToShowStats { get; set; } = false;
	public int Value { get; set; } = 0;
	public float BufferValue { get; set; } = _bufferPart * _sectionDurations[0];

	public StatisticsData Statistics = new();

	public BestUserData BestUserData;
	private string _userTag;
	private bool _dayScorePushed = false;

	public List<ChartSeries> Series { get; set; }
	public string[] XAxisLabels { get; set; }

	public string GuessText { get; set; }
	public string ResultText { get; set; }
	public Color BarColour { get; set; } = Color.Success;

	public string Skip { get; set; } = "Skip";

	private bool gameIncomplete = true;
	private bool _helpVisible = false;
	private bool _statsVisible = false;
	private Color chipColor;
	private string chipText;

	private bool _playSwitch = false;
	public bool PlaySwitch
	{
		get { return _playSwitch; }
		set { _playSwitch = value; HandleOnPlayChanged(); }
	}

	private string[] _skipIcons = new string[_numGuesses];

	private string _guesses = "";
	private List<string> _guessedSongs = new();

	private bool _guessInputFocused = false;

	private bool _userTagNotInEdit = true;

	private Color _userTagEditToggleButtonColor = Color.Primary;
	private string _userTagEditToggleButtonText = "Change";

	private string _audioAddress;
	private string _songName;
	private int _albumIndex;
	private string _editionDate;
	private int _editionVersion;
	private int[] _currentResults;
	private int _lastVersionWon;

	private bool loading = true;
	private bool loaded = false;

	private bool _disposed;

	[Inject] IBreakpointService BreakpointListener { get; set; }

	private Breakpoint _breakpoint;

	public void Dispose() => _disposed = true;

	private IJSObjectReference _jsModule;

	private bool _isDarkMode = true;
	public bool IsDarkMode
	{
		get { return _isDarkMode; }
		set { _isDarkMode = value; HandleOnDarkModeChanged(); }
	}

	public MudTheme RadioheardleTheme = new MudTheme()
	{
		Palette = new PaletteLight()
		{
			Tertiary = Colors.Indigo.Default
		},

		PaletteDark = new PaletteDark()
		{
			Tertiary = Colors.Indigo.Default
		},
	};

	protected override async Task OnInitializedAsync()
	{
		RefreshStats();
		var displayData = FileOperationsService.GetData();
		_audioAddress = "./Audio/" + displayData._songData._fileName;
		_songName = displayData._songData._songName;
		_albumIndex = displayData._songData._albumIndex;
		_editionDate = displayData._updateDate.DayOfWeek + " " + displayData._updateDate.Date.ToString("d", new CultureInfo("en-GB"));
		_editionVersion = displayData._version;
		BestUserData = displayData._bestUserData;
		_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/SoundScripts.js");
		CookiesService.Setup(ProtectedLocalStore);
		await CookiesService.LoadStorage();
		HandleStorageState();
		RefreshStats();
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await BreakpointListener.Subscribe(breakpoint => _breakpoint = breakpoint);
			_breakpoint = BreakpointListener.GetBreakpoint().Result;
		}
	}

	private void HandleStorageState()
	{
		_isDarkMode = CookiesService.DarkSetting;

		_userTag = CookiesService.UserTag;

		_currentResults = CookiesService.Results;

		if (CookiesService.LastVersionWon +1  < _editionVersion )
		{
			Statistics.StreakCount = 0;
		}
		else
		{
			Statistics.StreakCount = CookiesService.Streak;
		}

		_lastVersionWon = CookiesService.LastVersionWon;

		if (CookiesService.Version == _editionVersion)
		{
			_guesses = CookiesService.Guesses;
			_guessedSongs = CookiesService.SongsGuessed.ToList();

			_dayScorePushed = CookiesService.DayScorePushed;

			for (int i = 0; i <= _guesses.Length; i++)
			{
				BufferValue += _bufferPart * _sectionDurations[i];
			}

			if (CookiesService.GameComplete)
			{
				CompleteGame();
			}
			else
				HandleSkipPosition();
		}
		else
		{
			CookiesService.DayScorePushedWithTag = "";
			CookiesService.CommitStorage();
		}

		loading = false;
		loaded = true;
		StateHasChanged();
	}

	private void UpdateCookies()
	{
		CookiesService.UpdateStorage(_editionVersion, _guesses, GameCompleted, _currentResults, _lastVersionWon, Statistics.StreakCount, _userTag, _dayScorePushed, _guessedSongs);
	}

	//private async Task<IEnumerable<string>> AutoComplete(string search)
	//{
	//	return FileOperationsService.GetSearchSongs(search).OrderBy(each => Fastenshtein.Levenshtein.Distance(each, search));
	//}

	private void HandleOnDarkModeChanged()
	{
		StateHasChanged();
		CookiesService.DarkSetting = _isDarkMode;
		CookiesService.CommitStorage();
	}

	private void HandleOnUserTagSet()
	{
		UpdateCookies();

		if (CookiesService.DayScorePushed && CookiesService.DayScorePushedWithTag.Length < 1)
			UpdateDaySubmission();

		CookiesService.CommitStorage();
	}

	private void HandleOnUserTagEditToggle()
	{
		_userTagNotInEdit = !_userTagNotInEdit;

		if (_userTagNotInEdit)
		{
			_userTagEditToggleButtonColor = Color.Info;
			_userTagEditToggleButtonText = "Change";
			HandleOnUserTagSet();
		}
		else
		{
			_userTagEditToggleButtonColor = Color.Success;
			_userTagEditToggleButtonText = "Confirm";
		}
	}

	private async void HandleOnPlayChanged()
	{
		if (_playSwitch)
		{
			CallJsFunc("PlaySound");

			//set timer
			var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(_bufferTick));
			while (await timer.WaitForNextTickAsync() && Value <= BufferValue && PlaySwitch)
			{
				Value += 1;
				StateHasChanged();
			}

			PlaySwitch = false;
		}
		else
		{
			CallJsFunc("StopSound");
			Value = 0;
			StateHasChanged();
		}
	}

	private void HandleOnGuessFocus()
	{
		_guessInputFocused = true;
	}

	private void HandleOnGuessBlur()
	{
		_guessInputFocused = false;
	}

	private void OnOpenHelp()
	{
		_statsVisible = false;
		_helpVisible = true;

		StateHasChanged();
	}

	private void OnOpenStats()
	{
		_helpVisible = false;
		_statsVisible = true;

		StateHasChanged();
	}

	private void OnCloseOverlay()
	{
		_helpVisible = false;
		_statsVisible = false;

		StateHasChanged();
	}


	private void HandleOnSkip()
	{
		GuessText = string.Empty;
		_guesses += 's';
		BufferValue += _bufferPart * _sectionDurations[_guesses.Length];
		if (_guesses.Length >= (_numGuesses))
			CookiesService.Results[0] += 1;
		HandleSkipPosition();
	}

	private void HandleOnChipGuess(string song)
	{
		GuessText = song;
		HandleOnGuess();
	}

	private async void HandleOnGuess()
	{
		var song = _songName.Trim();

		if (GuessText == null || GuessText.Length == 0)
			return;

		if (string.Compare(GuessText.Trim(), song, StringComparison.InvariantCultureIgnoreCase) == 0)
		{
			_guesses += 'w';
			CookiesService.Results[_guesses.Length] += 1;

			CompleteGame();
		}
		else
		{
			_guesses += 'g';
			BufferValue += _bufferPart * _sectionDurations[_guesses.Length];

			_guessedSongs.Add(GuessText.Trim());

			if (_guesses.Length >= (_numGuesses))
				CookiesService.Results[0] += 1;
			HandleSkipPosition();
		}

		UpdateCookies();
		await CookiesService.CommitStorage();
	}

	private async void HandleSkipPosition()
	{
		switch (_guesses.Length)
		{
			case 0:
				BarColour = Color.Success;
				break;
			case 1:
				BarColour = Color.Info;
				break;
			case 2:
				BarColour = Color.Warning;
				break;
			case 3:
				BarColour = Color.Secondary;
				break;
			case 4:
				BarColour = Color.Error;
				break;
			default:
				BarColour = Color.Primary;
				break;
		}

		if (_guesses.Length >= (_numGuesses))
		{
			if (!GameCompleted)
			{
				CompleteGame();
			}
		}
		else if (_guesses.Length == _numGuesses - 1)
		{
			Skip = "Give up";
		}

		UpdateCookies();
		await CookiesService.CommitStorage();

		StateHasChanged();
	}

	private async void CompleteGame()
	{
		var win = _guesses.EndsWith('w');

		GuessText = _songName;
		GameCompleted = true;

		if ( _editionVersion != _lastVersionWon)
		{
			if (win)
			{
				Statistics.StreakCount += 1;
				_lastVersionWon = _editionVersion;
			}
			else
			{
				Statistics.StreakCount = 0;
			}
		}

		RefreshStats();

		if (!_dayScorePushed)
		{
			UpdateDaySubmission();
			CookiesService.CommitStorage();
		}

		ResultText = ResultGenerator.GetResultText(_numGuesses, _guesses, _editionVersion.ToString());

		chipColor = win ? Color.Success : Color.Error;
		chipText = win ? "Success" : "Failure";
		BarColour = Color.Primary;
		gameIncomplete = false;
		BufferValue = 100;

		await ProcessCompletion();
	}

	private void UpdateDaySubmission()
	{
		var score = _guesses.Last() == 'w' ? _guesses.Length : 6;
		var thisUserData = new BestUserData(score, new List<string>() { CookiesService.UserTag });
		FileOperationsService.PushBestScoreData(thisUserData);
		_dayScorePushed = true;
		CookiesService.DayScorePushedWithTag = _userTag;
		BestUserData = FileOperationsService.GetBestUserData();
	}

	private async Task ProcessCompletion()
	{
		WaitingToShowStats = true;
		StateHasChanged();
		await Task.Delay(3000);
		_statsVisible = true;
		WaitingToShowStats = false;
		StateHasChanged();
	}

	private void RefreshStats()
	{
		var results = CookiesService.Results != null ? CookiesService.Results : new int[6];

		var gamesPlayed = 0;
		var winPercentage = 0;

		foreach (var games in results)
		{
			gamesPlayed += games;
		}

		if (gamesPlayed != 0)
		{
			var losePercentage = (float)results[0] / gamesPlayed;
			winPercentage = 100 - (int)(losePercentage * 100);
		}

		Statistics.WinPercentage = winPercentage;
		Statistics.GamesPlayed = gamesPlayed;

		var withoutCurrent = new int[5];
		Array.Copy(results, 1, withoutCurrent, 0, 5);
		var mainArray = withoutCurrent.Select(x => (double)x).ToArray();

		var current = new double[5];

		if (GameCompleted)
		{
			if (_guesses.EndsWith('w'))
			{
				current[_guesses.Length - 1] = (double)results[_guesses.Length];
				mainArray[_guesses.Length - 1] = 0;
			}
		}

		Series = new List<ChartSeries>()
		{
			new ChartSeries() { Name = "Current", Data = current },
			new ChartSeries() { Name = "Guess Distribution", Data = mainArray }
		};

		XAxisLabels = new string[]{ "1", "2", "3", "4", "5" };
	}

	private void CallJsFunc(string funcName)
	{
		_jsModule.InvokeVoidAsync(funcName);
	}
}