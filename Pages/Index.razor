@page "/"
@using MudBlazor
@using RadioHeardleServer.Data;
@using System.Globalization;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore

@inject IJSRuntime JsRuntime;
@inject FileOperationsService fileOperationsService;


<PageTitle>Radioheardle</PageTitle>


<MudContainer MaxWidth="MaxWidth.Small">
	<MudStack Justify="Justify.Center">
		<MudCard hidden="@loaded">
			<MudCardContent>
				<MudText Align="Align.Center" Typo="Typo.body1">Loading...</MudText>
			</MudCardContent>
		</MudCard>
	</MudStack>
	<MudContainer hidden="@loading">
	<MudStack>
		<MudCard >
			<MudCardContent>
				<MudText><h1>Radioheardle</h1></MudText>
				<MudText>@_editionDate</MudText>
				<MudText hidden="@gameIncomplete" Align="Align.Center" Typo="Typo.h4">@_songName</MudText>
				<MudStack Justify="Justify.Center">
					<MudChip hidden="@gameIncomplete" Color="@chipColor" Text="@chipText"></MudChip>
				</MudStack>
				<MudProgressLinear Color="@BarColour" Value="@BufferValue" Class="my-7" Size="Size.Medium" />
				<MudProgressLinear Color="Color.Primary" Value="@Value" Class="my-7" Size="Size.Large" />
				<MudSwitch @bind-Checked="@PlaySwitch" Label="Play" Color="Color.Success" />
			</MudCardContent>
		</MudCard>

		<MudCard hidden="@GameCompleted">
			<MudCardContent>
				<MudStack Row=true Spacing="4">
					<MudButton @onclick="@HandleOnSkip" Disabled="@GameCompleted">@Skip</MudButton>
					<MudButton @onclick="@HandleOnGuess" Disabled="@GameCompleted">Guess</MudButton>
				</MudStack>
				<MudAutocomplete T="string" @bind-Value="@GuessText" Disabled="@GameCompleted" SearchFunc="@AutoComplete" MaxItems=5>
						<MoreItemsTemplate>
							<MudText Align="Align.Center" Class="px-4 py-1">
								...
							</MudText>
						</MoreItemsTemplate>
					</MudAutocomplete>
			</MudCardContent>
		</MudCard>
		<MudCard hidden="@gameIncomplete">
			<MudCardContent>
				<MudTextField @bind-Value="ResultText" Lines="3" Variant="Variant.Outlined" Label="Copy this text to show your mates" ReadOnly="true"></MudTextField>
			</MudCardContent>
		</MudCard>

		<MudCard hidden="@gameIncomplete">
			<MudCardContent>
					<MudText>Guess Distribution</MudText>
					<MudChart ChartType="ChartType.Bar" ChartOptions="@chartOptions" ChartSeries="@Series" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
				</MudCardContent>
		</MudCard>

		<MudCard hidden="@GameCompleted">
			<MudCardContent>
				<MudText Typo="Typo.body2">Guessing or Skipping will unlock the next section of the preview.</MudText>
						<MudText Typo="Typo.body2">(First 7 Albums)</MudText>
			</MudCardContent>
		</MudCard>
	</MudStack>
	</MudContainer>
</MudContainer>

<audio id="audioPlayer" src='@_audioAddress' type="audio/mpeg" />


@code {

	private static int _numGuesses = 5;
	private static int _totalSectionDuration = 20;
	private static int[] _sectionDurations = new int[] { 1, 2, 3, 5, 9, 0 };
	private static float _bufferPart = 100 / _totalSectionDuration;
	private static int _bufferTick = _totalSectionDuration * 10;

	public bool GameCompleted { get; set; } = false;
	public int Value { get; set; } = 0;
	public float BufferValue { get; set; } = _bufferPart * _sectionDurations[0];

	public List<ChartSeries> Series { get; set; }
	public string[] XAxisLabels { get; set; }

	public string GuessText { get; set; }
	public string ResultText { get; set; }
	public Color BarColour { get; set; } = Color.Success;

	public string Skip { get; set; } = "Skip";

	private bool gameIncomplete = true;
	private Color chipColor;
	private string chipText;

	private bool _playSwitch = false;
	public bool PlaySwitch
	{
		get { return _playSwitch; }
		set { _playSwitch = value; HandleOnPlayChanged(); }
	}

	private string[] _skipIcons = new string[_numGuesses];

	private string _guesses = "";

	private string _audioAddress;
	private string _songName;
	private string _editionDate;
	private int _editionVersion;

	private int _localVersion;
	private string _localGuesses;
	private bool _localGameComplete;
	private int[] _localResults;

	private bool loading = true;
	private bool loaded = false;

	private bool _disposed;

	public void Dispose() => _disposed = true;

	private IJSObjectReference _jsModule;

	private ChartOptions chartOptions = new ChartOptions()
	{
		LineStrokeWidth = 10.0,
		YAxisTicks = 1,
		DisableLegend = true
	};


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			_jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/SoundScripts.js");
			await LoadLocalStorage();
			HandleStorageState();
		} 
	}

	protected override void OnInitialized()
	{
		var songData = fileOperationsService.GetData();
		RefreshChartSeries();
		_audioAddress = "./Audio/" + songData._songData._fileName;
		_songName = songData._songData._songName;
		_editionDate = songData._updateDate.DayOfWeek + " " + songData._updateDate.Date.ToString("d", new CultureInfo("en-GB"));
		_editionVersion = songData._version;
	}


	private async void HandleStorageState()
	{
		Console.WriteLine("Cookies version: " + _localVersion);
		Console.WriteLine("Server version: " + _editionVersion);
		if (_localVersion == _editionVersion)
		{
			_guesses = _localGuesses;

			for (int i = 0; i <= _guesses.Length; i++)
			{
				BufferValue += _bufferPart * _sectionDurations[i];
			}

			HandleSkipPosition();

			if (_localGameComplete)
				CompleteGame();
		}
		else
		{
			Console.WriteLine("cookies don't match server version");
			await UpdateLocalStorage();
		}

		loading = false;
		loaded = true;

		StateHasChanged();
	}

	private async Task LoadLocalStorage()
	{
		var version = await ProtectedLocalStore.GetAsync<int>("version");
		_localVersion = version.Success ? version.Value : 1;

		var guesses = await ProtectedLocalStore.GetAsync<string>("guesses");
		_localGuesses = guesses.Success && guesses.Value!=null ? guesses.Value : "";

		var complete = await ProtectedLocalStore.GetAsync<bool>("gameComplete");
		_localGameComplete = complete.Success ? complete.Value : false;

		var results = await ProtectedLocalStore.GetAsync<int[]>("results");
		_localResults = results.Success && results.Value != null ? results.Value : new int[6];
	}

	private async Task UpdateLocalStorage()
	{
		await ProtectedLocalStore.SetAsync("version", _editionVersion);
		await ProtectedLocalStore.SetAsync("guesses", _guesses);
		await ProtectedLocalStore.SetAsync("gameComplete", GameCompleted);
		await ProtectedLocalStore.SetAsync("results", _localResults);
	}

	private async Task<IEnumerable<string>> AutoComplete(string search)
	{
		return fileOperationsService.GetSearchSongs(search);
	}

	private async void HandleOnPlayChanged()
	{
		if (_playSwitch)
		{
			CallJsFunc("PlaySound");

			//set timer
			var timer = new PeriodicTimer(TimeSpan.FromMilliseconds(_bufferTick));
			while (await timer.WaitForNextTickAsync() && Value <= BufferValue)
			{
				Value += 1;
				StateHasChanged();
			}

			PlaySwitch = false;
		}
		else
		{
			CallJsFunc("StopSound");
			Value = 0;
			StateHasChanged();
		}
	}

	private void HandleOnSkip()
	{
		GuessText = string.Empty;
		_guesses += 's';
		BufferValue += _bufferPart * _sectionDurations[_guesses.Length];
		if (_guesses.Length >= (_numGuesses))
			_localResults[0] += 1;
		HandleSkipPosition();
	}

	private void HandleOnGuess()
	{
		var song = _songName.Trim();

		if (GuessText == null || GuessText.Length == 0)
			return;

		if (string.Compare(GuessText.Trim(), song, StringComparison.InvariantCultureIgnoreCase) == 0)
		{
			_guesses += 'w';
			_localResults[_guesses.Length] += 1;
	
			CompleteGame();
			UpdateLocalStorage();
		}
		else
		{
			_guesses += 'g';
			BufferValue += _bufferPart * _sectionDurations[_guesses.Length];
			if (_guesses.Length >= (_numGuesses))
				_localResults[0] += 1;
			HandleSkipPosition();
		}
	}

	private async void HandleSkipPosition()
	{
		switch (_guesses.Length)
		{
			case 0:
				BarColour = Color.Success;
				break;
			case 1:
				BarColour = Color.Info;
				break;
			case 2:
				BarColour = Color.Warning;
				break;
			case 3:
				BarColour = Color.Secondary;
				break;
			case 4:
				BarColour = Color.Error;
				break;
			default:
				BarColour = Color.Primary;
				break;
		}

		if (_guesses.Length >= (_numGuesses))
		{
			if (!GameCompleted)
			{
				CompleteGame();
			}
		}
		else if (_guesses.Length == _numGuesses - 1)
		{
			Skip = "Give up";
		}

		await UpdateLocalStorage();

		StateHasChanged();
	}

	private void CompleteGame()
	{
		var win = _guesses.EndsWith('w');

		GuessText = _songName;
		GameCompleted = true;

		RefreshChartSeries();

		ResultText = ResultGenerator.GetResultText(_numGuesses, _guesses, _editionDate);

		chipColor = win ? Color.Success : Color.Error;
		chipText = win ? "Success" : "Failure";
		BarColour = Color.Primary;
		gameIncomplete = false;
		BufferValue = 100;
	}

	private void RefreshChartSeries()
	{
		var results = _localResults != null ? _localResults : new int[6];
		var doubleArray = results.Select(x => (double)x).ToArray();
		Series = new List<ChartSeries>()
		{
			new ChartSeries() { Name = "Guess Distribution", Data = doubleArray }
		};

		XAxisLabels = new string[]{ "Fail", "1", "2", "3", "4", "5" };
	}

	private void CallJsFunc(string funcName)
	{
		_jsModule.InvokeVoidAsync(funcName);
	}
}